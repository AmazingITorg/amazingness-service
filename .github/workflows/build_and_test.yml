name: Amazingness Service Build and Test

on:
  workflow_dispatch:
    inputs: 
      buildTag:
        description: Build specific tagged version
        required: false
      version:
        description: Untagged Version
        required: true
        default: 1.0.0
  push:
    
env:
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
 DEFAULT_RELEASE_VERSION: "1.0.0"

jobs:
  Test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: temurin
        
    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Unit Tests
      run: mvn test -Dtest=AmazingUnitTest
      
    - name: Integration Tests
      run: mvn test -Dtest=AmazingResourceTest
      
  SonarCloud-Analysis:
      runs-on: ubuntu-latest
      needs: [Test]
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: 17
            distribution: temurin

        - name: Cache local Maven repository
          uses: actions/cache@v3
          with:
            path: ~/.m2/repository
            key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-maven-
              
        - name: Analyze with SonarCloud
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: |
            mvn verify sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=amazingitorg \
            -Dsonar.projectKey=AmazingITorg_amazingness-service \
            -Dsonar.qualitygate.wait=true
            
  Build-and-push-docker-image:
    needs: [Test, SonarCloud-Analysis, Snyk]
    name: Build and push Docker image
    runs-on: ubuntu-latest
    outputs:
      imagetag: ${{ steps.dockertag.outputs.tag }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Package Application
        run: mvn package -Dmaven.test.skip

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}
          tags: |
            type=sha,format=long
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Set docker image tag output
        id: dockertag
        run: |
          DOCKER_IMAGE_TAG=`echo ${{ steps.meta.outputs.tags }} | cut -d ":" -f2`
          echo $DOCKER_IMAGE_TAG
          echo "tag=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
          
  Build-and-push-helm-chart:
    name: Build and push to ghcr
    needs: [Build-and-push-docker-image]
    runs-on: ubuntu-latest
    outputs:
      chartversion: ${{ steps.charttag.outputs.tag }}
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
        name: Checkout
          
      - name: Update Version
        id: charttag
        run: |
          version=$(cat ./helm/values.yaml | grep tag: | awk '{print $2}')
          echo $version
          echo ${{ steps.meta.outputs.tags }} | cut -d ":" -f2
          DOCKER_IMAGE_TAG=`echo ${{needs.Build-and-push-docker-image.outputs.imagetag}} | cut -d ":" -f2`
          echo $DOCKER_IMAGE_TAG
          echo ${{ steps.meta.outputs.tags }}
          sed -i "s/$version/$DOCKER_IMAGE_TAG/" ./helm/values.yaml
          cat ./helm/values.yaml
          
          VERSION=${{ github.event.inputs.buildTag }}
          TAGGED_BUILD="false"
          if [ -z "$VERSION" ]
          then
              VERSION=`echo ${{ $DEFAULT_RELEASE_VERSION }}-$GITHUB_RUN_NUMBER`
          else
              VERSION=`echo ${{ github.event.inputs.buildTag }}`
          fi
          
          echo $VERSION
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          sed -i "s/<CHART_VERSION>/$VERSION/" helm/Chart.yaml
         
      - name: Login to ghcr container registry 
        run: |
          REPO_OWNER=`echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]'`
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
         
      - name: Pushing Helm Chart
        run: |
          REPO_OWNER=`echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]'`

          cd helm
          helm dependency update
          cd ..
          helm package helm   
          PKG_NAME=`ls *.tgz`
          helm push ${PKG_NAME} oci://ghcr.io/${REPO_OWNER}/charts/${{ env.BRANCH_NAME }}

  Deploy:
    needs: [Build-and-push-helm-chart]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - uses: azure/setup-kubectl@v2.0
        id: install
        
      - name: Deploy app
        run: |
          sed -i "s/<VERSION>/${{needs.Build-and-push-helm-chart.outputs.charttag}}/" argocd/amazingness-service.yaml
          sed -i "s/<BRANCH>/${{ env.BRANCH_NAME }}/" argocd/amazingness-service.yaml
          
          kubectl apply -f "argocd/amazingness-service.yaml" -n argocd 

  Snyk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
