name: Amazingness Service Build and Test

on:
  workflow_dispatch:
  
jobs:
#   Test:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3
        
#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: 17
#         distribution: temurin
        
#     - name: Cache local Maven repository
#       uses: actions/cache@v3
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
          
#     - name: Unit Tests
#       run: mvn test -Dtest=AmazingUnitTest
      
#     - name: Integration Tests
#       run: mvn test -Dtest=AmazingResourceTest
      
#   SonarCloud-Analysis:
#       runs-on: ubuntu-latest
#       needs: [Test]
#       steps:
#         - name: Checkout
#           uses: actions/checkout@v3
#         - name: Set up JDK 17
#           uses: actions/setup-java@v3
#           with:
#             java-version: 17
#             distribution: temurin

#         - name: Cache local Maven repository
#           uses: actions/cache@v3
#           with:
#             path: ~/.m2/repository
#             key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#             restore-keys: |
#               ${{ runner.os }}-maven-
              
#         - name: Analyze with SonarCloud
#           env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           run: |
#             mvn verify sonar:sonar \
#             -Dsonar.host.url=https://sonarcloud.io \
#             -Dsonar.organization=amazingitorg \
#             -Dsonar.projectKey=AmazingITorg_amazingness-service \
#             -Dsonar.qualitygate.wait=true
            
  Build-and-push-docker-image:
#     needs: [Test, SonarCloud-Analysis, Snyk]
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Package Application
        run: mvn package -Dmaven.test.skip

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}
          tags: |
            type=sha,format=long
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Update Version
        run: |
          version=$(cat ./helm/values.yaml | grep tag: | awk '{print $2}')
          echo $version
          echo ${{ steps.meta.outputs.tags }} | cut -d ":" -f2
          DOCKER_IMAGE_TAG=`echo ${{ steps.meta.outputs.tags }} | cut -d ":" -f2`
          echo $DOCKER_IMAGE_TAG
          echo ${{ steps.meta.outputs.tags }}
          sed -i "s/$version/$DOCKER_IMAGE_TAG/" ./helm/values.yaml
          cat ./helm/values.yaml
     
      - name: Commit and push new image version
        uses: devops-infra/action-commit-push@v0.3
        with:
          github_token: ${{ secrets.TOKEN_COMMIT_PUSH }}
          commit_message: Version updated
          
#     git-leaks:
#     name: secrets detection
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 2
#       - uses: gitleaks/gitleaks-action@v2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
#   Update-App-Version:
#     name: Update version
#     needs: [Build-and-push-docker-image]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Update Version
#         run: |
#          echo ${{needs.Build-and-push-docker-image.outputs.docker-tag}}

#       - name: Commit and push changes
#         uses: devops-infra/action-commit-push@v0.3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           commit_message: Version updated
  
#   Build-and-push-helm-chart:
#     name: Build and push to ghcr
#     needs: [Build-and-push-docker-image]
#     runs-on: ubuntu-latest
#     permissions:
#       packages: write
#     steps:
#       - uses: actions/checkout@v3
#         name: Checkout
            
#       - uses: actions/checkout@v2
#       - name: Login to ghcr container registry
#         run: |
#           REPO_OWNER=`echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]'`
#           echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
#       - name: Pushing Helm Chart
#         run: |
#           sed -i "s/<CHART_VERSION>/0.0.0/" helm/Chart.yaml
#           REPO_OWNER=`echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]'`
#           cd helm
#           helm dependency update
#           cd ..
#           helm package helm   
#           PKG_NAME=`ls *.tgz`
#           helm push ${PKG_NAME} oci://ghcr.io/${REPO_OWNER}/charts

#   Snyk:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - name: Run Snyk to check for vulnerabilities
#         uses: snyk/actions/maven@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
